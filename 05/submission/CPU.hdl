// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // get zero
    Not(in=instruction[0], out=zeroF);
    And(a=instruction[0], b=zeroF, out=zero);

    // get one
    Not(in=instruction[0], out=oneF);
    Or(a=instruction[0], b=oneF, out=one);    

    // ALU
    ALU(x=dOut, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=nil, ng=neg);    
    
    // should write to A and what if should
    Mux(a=one, b=zero, sel=instruction[15], out=isA);
    Mux(a=instruction[5], b=one, sel=isA, out=writeA);
    Mux16(a=aluOut, b=instruction, sel=isA, out=toA);
   
    // should we write to other registers 
    Mux(a=instruction[4], b=zero, sel=isA, out=writeD);
    Mux(a=instruction[3], b=zero, sel=isA, out=writeM);
    ARegister(in=toA, load=writeA, out=aOut, out[0..14]=addressM);
    DRegister(in=aluOut, load=writeD, out=dOut);
    // should A or M input be routed to ALU
    Mux16(a=aOut, b=inM, sel=instruction[12], out=aOrM);
    
    // PC logic
   
    // unconditional jump
    And(a=instruction[0], b=instruction[1], out=andOne);
    And(a=andOne, b=instruction[2], out=jumpOrNo);   

    // JLE
    Or(a=nil, b=neg, out=jle);
    And(a=instruction[1], b=instruction[2], out=jleInst);
    And(a=jle, b=jleInst, out=jleOut);

    // JLT 
    And(a=instruction[2], b=neg, out=jltOut);

    // JEQ
    And(a=instruction[1], b=nil, out=jeqOut);

    // JGT
    Not(in=nil, out=notNil);
    Not(in=neg, out=notNeg);
    And(a=notNil, b=notNeg, out=jgt);
    And(a=instruction[0], b=jgt, out=jgtOut);
 
    // JGE
    And(a=nil, b=notNeg, out=jge);
    And(a=instruction[0], b=instruction[1], out=jgeInst);
    And(a=jgeInst, b=jge, out=jgeOut);  

    // JNE
    And(a=instruction[0], b=instruction[2], out=jneInst); 
    And(a=notNil, b=jneInst, out=jneOut); 

    //Or8Way 
    Or(a=jumpOrNo, b=jleOut, out=load1);
    Or(a=load1, b=jltOut, out=load2);
    Or(a=load2, b=jeqOut, out=load3);
    Or(a=load3, b=jgtOut, out=load4);
    Or(a=load4, b=jgeOut, out=load5);
    Or(a=load5, b=jneOut, out=load6);
    Not(in=isA, out=notIsA);
    And(a=notIsA, b=load6, out=load7);    

    // PC
    PC(in=aOut, load=load7, inc=one, reset=reset, out[0..14]=pc); 
}
